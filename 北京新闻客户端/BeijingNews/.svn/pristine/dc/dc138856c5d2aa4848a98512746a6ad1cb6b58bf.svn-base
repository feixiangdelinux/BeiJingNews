package com.atguigu.beijingnews.base.impl.detailmenu;

import java.util.List;

import android.app.Activity;
import android.graphics.Bitmap.Config;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.atguigu.beijingnews.R;
import com.atguigu.beijingnews.domain.NewsCenterBean.NewsCenterMenuTag;
import com.atguigu.beijingnews.domain.TabDetailBean;
import com.atguigu.beijingnews.domain.TabDetailBean.News;
import com.atguigu.beijingnews.domain.TabDetailBean.Topnews;
import com.atguigu.beijingnews.utils.CachUtils;
import com.atguigu.beijingnews.utils.ConstantUtils;
import com.atguigu.beijingnews.view.HorizontalScrollViewPager;
import com.google.gson.Gson;
import com.lidroid.xutils.BitmapUtils;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;
import com.lidroid.xutils.view.annotation.ViewInject;

/**
 * 新闻详情页面对应的页签页面
 * @author 杨光福
 * @Time 2015-7-27  上午9:27:25
 */
public class TabDetailPager extends DetailMenuBasePager {
	
	/**
	 * 网络请求数据对应的链接
	 */
	private String url;
	
	
	@ViewInject(R.id.viewpager_tab_detail_topnews)
	private HorizontalScrollViewPager viewpager_tab_detail_topnews;
	
	@ViewInject(R.id.tv_title_tab_detail)
	private TextView tv_title_tab_detail;
	
	@ViewInject(R.id.ll_point_group_tab_detail)
	private LinearLayout ll_point_group_tab_detail;
	
	
	@ViewInject(R.id.lv_tab_detail_news_list)
	private ListView lv_tab_detail_news_list;

	/**
	 * 页签页面对应的数据
	 */
	private NewsCenterMenuTag newsCenterMenuTag;
	
	/**
	 * 顶部新闻对应的数据
	 */
	private List<Topnews> topnews;
	
	/**
	 * 新闻列表的数据
	 */
	private List<News> newsLists ;


	/**
	 * 加载图片的工具-XUtils
	 */
	private BitmapUtils bitmapUtils;
	
	/**
	 * 上一次被高亮显示的点的位置
	 */
	private int prePointSelect = 0;
	
	
	public TabDetailPager(Activity activity) {
		super(activity);
	}
	public TabDetailPager(Activity activity, NewsCenterMenuTag newsCenterMenuTag) {
		super(activity);
		this.newsCenterMenuTag = newsCenterMenuTag;
		bitmapUtils = new BitmapUtils(activity);
		bitmapUtils.configDefaultBitmapConfig(Config.ARGB_4444);
	}
	@Override
	public View initView() {
		
		View view = View.inflate(activity, R.layout.tab_detail, null);
        ViewUtils.inject(this, view);
        
        //ListView加载头
//        Button uButton = new Button(activity);
//        uButton.setText("我是按钮");
        View topnews = View.inflate(activity, R.layout.tab_detail_topnews, null);
        ViewUtils.inject(this, topnews);
        
        lv_tab_detail_news_list.addHeaderView(topnews);
		return view;
	}
	
	@Override
	public void initData() {
		super.initData();
//		tv.setText(newsCenterMenuTag.title);
		System.out.println("TabDetailPager=="+newsCenterMenuTag.url);
		//网络请求的链接
		 url = ConstantUtils.base_url+newsCenterMenuTag.url;
		 System.out.println("TabDetailPager==url=="+url);
		 //得到缓存的数据
		 String json = CachUtils.getString(activity, url);
		 if(!TextUtils.isEmpty(json)){
			 //解析数据和处理数据
			 processData(json);
		 }
		 
		 getDataFromNet();
	}
	
	/**
	 * 解析和处理数据
	 * @param json
	 */
	private void processData(String json) {
		// 解析数据
		Gson gson = new Gson();
		TabDetailBean tabDetailBean = gson.fromJson(json, TabDetailBean.class);
		
//		System.out.println("解析成功了："+tabDetailBean.data.topnews.get(0).title);
		
		//显示数据-设置适配器
		topnews = tabDetailBean.data.topnews;
		
		//设置适配器
		viewpager_tab_detail_topnews.setAdapter(new MyPagerAdapter());
		
		
		//把上一次的一次
		ll_point_group_tab_detail.removeAllViews();
		//添加点
		for(int i=0;i<topnews.size();i++){
			
			//点的创建
			View topnews_point = new View(activity);
			topnews_point.setBackgroundResource(R.drawable.topnews_point_selector);
			
			LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(5, 5);
			if(i !=0){
				params.leftMargin = 10;
			}
			topnews_point.setLayoutParams(params );
			
			topnews_point.setEnabled(false);
			
			
			//把每一个点添加到线性布局里面去
			ll_point_group_tab_detail.addView(topnews_point);
			
			
		}
		
		//设置第一个点为高亮
		ll_point_group_tab_detail.getChildAt(0).setEnabled(true);
		
		//监听ViewPager的滑动
		viewpager_tab_detail_topnews.setOnPageChangeListener(new MyOnPageChangeListener());
		
		//设置默认标题
		tv_title_tab_detail.setText(topnews.get(0).title);
		
		
		//得到新闻列表的数据
		newsLists = tabDetailBean.data.news;
		
		//设置ListView的适配器
		lv_tab_detail_news_list.setAdapter(new MyAdapter());
		
		
	}
	
	class MyAdapter extends BaseAdapter{

		@Override
		public int getCount() {
			return newsLists.size();
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View view;
			ViewHolder holder;
			if(convertView != null){
				view = convertView;
				holder = (ViewHolder) view.getTag();
			}else{
				view = View.inflate(activity, R.layout.tab_detail_item, null);
				holder = new ViewHolder();
				holder.iv_icon = (ImageView) view.findViewById(R.id.iv_icon);
				holder.tv_title = (TextView) view.findViewById(R.id.tv_title);
				holder.tv_time = (TextView) view.findViewById(R.id.tv_time);
				
				//把对应关系保存起来
				view.setTag(holder);
				
			}
			
			//根据位置得到对应的数据
			News newsItem = newsLists.get(position);
			//设置默认图片
			holder.iv_icon.setImageResource(R.drawable.news_pic_default);
			bitmapUtils.display(holder.iv_icon, newsItem.listimage);
			holder.tv_title.setText(newsItem.title);
			holder.tv_time.setText(newsItem.pubdate);
			
			
			return view;
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return 0;
		}

		
	}
	
	static class ViewHolder{
		ImageView iv_icon;
		TextView tv_title;
		TextView tv_time;
	}
	
	class MyOnPageChangeListener implements OnPageChangeListener{

		
		@Override
		public void onPageSelected(int position) {
			// TODO Auto-generated method stub
			//文字要变化
			tv_title_tab_detail.setText(topnews.get(position).title);
			//把上一个点的变成默认
			ll_point_group_tab_detail.getChildAt(prePointSelect).setEnabled(false);
			
			//当前的点设置为红点
			ll_point_group_tab_detail.getChildAt(position).setEnabled(true);
			
			prePointSelect = position;
			
			
			
		}
		@Override
		public void onPageScrollStateChanged(int arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void onPageScrolled(int arg0, float arg1, int arg2) {
			// TODO Auto-generated method stub
			
		}

		
		
	}
	class MyPagerAdapter extends PagerAdapter{

		@Override
		public int getCount() {
			return topnews.size();
		}
		
		
		@Override
		public Object instantiateItem(ViewGroup container, int position) {
			ImageView imageView = new ImageView(activity);
			imageView.setBackgroundResource(R.drawable.home_scroll_default);
			
			//设置安卓X和Y轴拉伸
			imageView.setScaleType(ScaleType.FIT_XY);
			
			//请求网络图片
			Topnews topnewsItem = topnews.get(position);
			String imageUrl = topnewsItem.topimage;
			
			
			
			bitmapUtils.display(imageView, imageUrl);
			
			
			container.addView(imageView);
			
			return imageView;
		}

		@Override
		public boolean isViewFromObject(View arg0, Object arg1) {
			return arg0==arg1;
		}

		@Override
		public void destroyItem(ViewGroup container, int position, Object object) {
			container.removeView((View)object);
		}

		
		
		
		
	}
	/**
	 * 根据url请求网络
	 */
	private void getDataFromNet() {
		HttpUtils httpUtils = new HttpUtils();
		httpUtils.send(HttpMethod.GET, url, new RequestCallBack<String>() {

			@Override
			public void onSuccess(ResponseInfo<String> responseInfo) {
				// TODO Auto-generated method stub
				System.out.println("TabDetailPager请求成功=="+responseInfo.result);
				//缓存数据
				CachUtils.setString(activity, url, responseInfo.result);
				
				//解析和处理数据
				processData(responseInfo.result);
				
			}

			@Override
			public void onFailure(HttpException error, String msg) {
				// TODO Auto-generated method stub
				System.out.println("TabDetailPager请求失败=="+msg);
				
			}
		});
		
	}

}

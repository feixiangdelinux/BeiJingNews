package com.atguigu.beijingnews.base.impl.detailmenu;

import java.util.List;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.os.Handler;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.GridView;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import com.atguigu.beijingnews.R;
import com.atguigu.beijingnews.domain.PhotosMenuDetailBean;
import com.atguigu.beijingnews.domain.PhotosMenuDetailBean.News;
import com.atguigu.beijingnews.utils.BitmapCacheUtils;
import com.atguigu.beijingnews.utils.CachUtils;
import com.atguigu.beijingnews.utils.ConstantUtils;
import com.atguigu.beijingnews.utils.NetCacheUtils;
import com.google.gson.Gson;
import com.lidroid.xutils.BitmapUtils;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;
import com.lidroid.xutils.view.annotation.ViewInject;

/**
 * 图组对应的详情页面
 * 
 * @author 杨光福
 * @Time 2015-7-25 下午2:25:37
 */
public class PhotosMenuDetailPager extends DetailMenuBasePager {

	protected static final String TAG = "PhotosMenuDetailPager";

	@ViewInject(R.id.lv_photos)
	private ListView lv_photos;

	@ViewInject(R.id.gv_photos)
	private GridView gv_photos;

	/**
	 * 图组详情页面对应的数据
	 */
	private List<News> photosNews;

	private BitmapUtils bitmapUtils;
	private BitmapCacheUtils bitmapCacheUtils;

	public PhotosMenuDetailPager(Activity activity) {
		super(activity);
		bitmapUtils = new BitmapUtils(activity);
		bitmapUtils.configDefaultBitmapConfig(Config.ARGB_4444);
		bitmapCacheUtils = new BitmapCacheUtils(handler);
	}

	@Override
	public View initView() {
		View view = View.inflate(activity, R.layout.photos_menudetail_pager,
				null);
		ViewUtils.inject(this, view);
		return view;
	}

	@Override
	public void initData() {
		super.initData();

		// 取出缓存的数据
		String json = CachUtils.getString(activity, ConstantUtils.photos_url);
		if (!TextUtils.isEmpty(json)) {
			processData(json);
		}

		// 请求网络
		getDataFromNet();

	}

	/**
	 * 请求网络
	 */
	private void getDataFromNet() {
		HttpUtils httpUtils = new HttpUtils();
		httpUtils.send(HttpMethod.GET, ConstantUtils.photos_url,
				new RequestCallBack<String>() {

					@Override
					public void onSuccess(ResponseInfo<String> responseInfo) {
						// TODO Auto-generated method stub
						// 缓存数据
						CachUtils.setString(activity, ConstantUtils.photos_url,
								responseInfo.result);
						// 解析和处理数据
						processData(responseInfo.result);
						Log.e(TAG, "网络连接成功了：" + responseInfo.result);

					}

					@Override
					public void onFailure(HttpException error, String msg) {
						// TODO Auto-generated method stub
						Log.e(TAG, "网络连接失败：" + msg);

					}
				});

	}

	/**
	 * 解析和处理数据
	 * 
	 * @param result
	 */
	protected void processData(String json) {
		// TODO Auto-generated method stub
		// 解析数据
		Gson gson = new Gson();
		PhotosMenuDetailBean detailBean = gson.fromJson(json,
				PhotosMenuDetailBean.class);
		Log.e(TAG, "解析成功了---" + detailBean.data.title);

		// 显示数据
		photosNews = detailBean.data.news;

		isShowList = true;
		// 设置适配器
		lv_photos.setAdapter(new PhotosAdapter());
		gv_photos.setVisibility(View.GONE);
		lv_photos.setVisibility(View.VISIBLE);
		// gv_photos.setAdapter(new PhotosAdapter());

	}

	/**
	 * true默认是显示ListView false:显示GridView
	 */
	private boolean isShowList = true;

	public void switcheListAndGrid(ImageButton ib_base_list_grid) {
		isShowList = !isShowList;
		if (isShowList) {
			// 显示listView
			gv_photos.setVisibility(View.GONE);
			lv_photos.setVisibility(View.VISIBLE);
			// 设置适配器
			lv_photos.setAdapter(new PhotosAdapter());

			// 设置按钮的状态-九宫格
			ib_base_list_grid.setImageResource(R.drawable.icon_pic_grid_type);
		} else {
			// 显示GridView

			gv_photos.setVisibility(View.VISIBLE);
			lv_photos.setVisibility(View.GONE);
			// 设置适配器
			gv_photos.setAdapter(new PhotosAdapter());

			// 设置按钮的状态-List状态
			ib_base_list_grid.setImageResource(R.drawable.icon_pic_list_type);
		}
	}

	static class ViewHolder {
		ImageView iv_icon;
		TextView tv_title;

	}

	private Handler handler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case NetCacheUtils.SUCCESS:// 图片加载成功
				Bitmap bitmap = (Bitmap) msg.obj;
				int postion = msg.arg2;
				System.out.println("图片加载成功=="+postion);
				ImageView iv_icon = null;
				if(lv_photos!= null&&lv_photos.isShown()){
					iv_icon = (ImageView) lv_photos.findViewWithTag(postion);
				}else if(gv_photos != null&& gv_photos.isShown()){
					iv_icon = (ImageView) gv_photos.findViewWithTag(postion);
				}
				
				if(iv_icon != null &&bitmap!= null){
					iv_icon.setImageBitmap(bitmap);
				}

				break;

			case NetCacheUtils.FAIL:// 图片加载失败
				postion = msg.arg2;
				System.out.println("图片加载成功=="+postion);
				break;

			default:
				break;
			}
		};
	};

	class PhotosAdapter extends BaseAdapter {

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return photosNews.size();
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub
			View view;
			ViewHolder holder;
			if (convertView != null) {
				view = convertView;
				holder = (ViewHolder) view.getTag();
			} else {
				holder = new ViewHolder();
				view = View.inflate(activity, R.layout.photos_item, null);
				holder.iv_icon = (ImageView) view.findViewById(R.id.iv_icon);
				holder.tv_title = (TextView) view.findViewById(R.id.tv_title);

				view.setTag(holder);
			}

			// 根据得到对应的对象
			News newsItem = photosNews.get(position);
			holder.tv_title.setText(newsItem.title);

			// bitmapUtils.display(holder.iv_icon, newsItem.listimage);

		  
			holder.iv_icon.setTag(position);
			Bitmap bitmap = bitmapCacheUtils.getBitmapFromUrl(
					newsItem.listimage, position);// 主线程：由内存和本地
			if (bitmap != null) {
				holder.iv_icon.setImageBitmap(bitmap);
			}

			return view;
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return 0;
		}

	}

}
